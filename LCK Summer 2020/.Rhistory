probatt[a] <- prod(probattcomp)
}
}
dprobatt <- data.frame(attvec <- attlabels, prob <- probatt,
A1 <- attpatt[,1],
A2 <- attpatt[,2],
A3 <- attpatt[,3],
A4 <- attpatt[,4],
A5 <- attpatt[,5])
colnames(dprobatt) = c("attvec","prob","A1","A2","A3","A4","A5")
dprobatt
#####
#to produce the latent groups
colname <- c("A1","A2","A3","A4","A5")
rowname1 <- c("LG1","LG2")
matname1 <- c("I1","I2","I3","I4","I5")
rowname2 <- c("LG1","LG2","LG3","LG4")
matname2 <- c("I6","I7","I8","I9","I10")
rowname3 <- c("LG1","LG2","LG3","LG4","LG5","LG6","LG7","LG8")
matname3 <- c("I11","I12","I13","I14","I15")
lgarray1 <- array(0,dim=c(2**(sum(Q1[1,])),ncol(attpatt),5),
dimnames = list(rowname1,colname,matname1))
lgarray2 <- array(0,dim=c(2**(sum(Q1[6,])),ncol(attpatt),5),
dimnames = list(rowname2,colname,matname2))
lgarray3 <- array(0,dim=c(2**(sum(Q1[11,])),ncol(attpatt),5),
dimnames = list(rowname3,colname,matname3))
modelfit$catprob.parm
ab <- Sys.time()
for (i in 1:nrow(Q1)) {
k <- 1
if (i < 6) {
for (j in 1:ncol(Q1)) {
if (Q1[i,j] == 1){
lgarray1[2,j,i] = 1
}
}
}
else if (i < 11) {
for (j in 1:ncol(Q1)) {
if (Q1[i,j] == 1) {
if(k == 1) {
lgarray2[2,j,i-5] = 1
lgarray2[4,j,i-5] = 1
k <- k + 1
}
else {
lgarray2[3,j,i-5] = 1
lgarray2[4,j,i-5] = 1
}
}
}
}
else if (i >= 11) {
for (j in 1:ncol(Q1)) {
if (Q1[i,j] == 1){
if(k == 1) {
lgarray3[2,j,i-10] = 1
lgarray3[5,j,i-10] = 1
lgarray3[6,j,i-10] = 1
lgarray3[8,j,i-10] = 1
k <- k + 1
}
else if(k == 2) {
lgarray3[3,j,i-10] = 1
lgarray3[5,j,i-10] = 1
lgarray3[7,j,i-10] = 1
lgarray3[8,j,i-10] = 1
k <- k + 1
}
else {
lgarray3[4,j,i-10] = 1
lgarray3[6,j,i-10] = 1
lgarray3[7,j,i-10] = 1
lgarray3[8,j,i-10] = 1
}
}
}
}
}
ba <- Sys.time()
runtime <- ba - ab
runtime
sum(dprobatt$prob) #1
##to produce new array of latent grps with corresponding prob
colname <- c("A1","A2","A3","A4","A5","LGnum","prob")
rowname1 <- c("LG1","LG2")
matname1 <- c("I1","I2","I3","I4","I5")
rowname2 <- c("LG1","LG2","LG3","LG4")
matname2 <- c("I6","I7","I8","I9","I10")
rowname3 <- c("LG1","LG2","LG3","LG4","LG5","LG6","LG7","LG8")
matname3 <- c("I11","I12","I13","I14","I15")
lgprob1 <- array(0,dim=c(2**(sum(Q1[1,])),ncol(attpatt)+2,5),
dimnames = list(rowname1,colname,matname1))
lgprob2 <- array(0,dim=c(2**(sum(Q1[6,])),ncol(attpatt)+2,5),
dimnames = list(rowname2,colname,matname2))
lgprob3 <- array(0,dim=c(2**(sum(Q1[11,])),ncol(attpatt)+2,5),
dimnames = list(rowname3,colname,matname3))
for (i in 1:5) {
lgprob1[,1:5,i] <- lgarray1[,1:5,i]
lgprob2[,1:5,i] <- lgarray2[,1:5,i]
lgprob3[,1:5,i] <- lgarray3[,1:5,i]
}
lgprob1[,6,] <- 1:2
lgprob2[,6,] <- 1:4
lgprob3[,6,] <- 1:8
ind <- rep(0, times = length(dprobatt$prob))
dprobatt <- cbind(dprobatt,ind)
#computing the probabilities of the latent groups
for (i in 1:nrow(Q1)) {
dprobatt[,8] <- 0
if (i < 6) {
a <- which(lgarray1[2,,i] == 1)
for (k in 1:length(dprobatt$prob)) {
if (dprobatt[k,a+2] == 1) {
dprobatt[k,8] <- 1
}
}
c2 <- sum(dprobatt$prob[which(dprobatt$ind == 1)])
c1 <- 1-c2
lgprob1[,7,i] <- c(c1,c2)
}
else if (i < 11) {
a <- which(lgarray2[2,,i-5] == 1)
b <- which(lgarray2[3,,i-5] == 1)
for (k in 1:length(dprobatt$prob)) {
if (dprobatt[k,a+2] == 0 & dprobatt[k,b+2] == 0) {
dprobatt[k,8] <- 1
}
else if (dprobatt[k,a+2] == 1 & dprobatt[k,b+2] == 0) {
dprobatt[k,8] <- 2
}
else if (dprobatt[k,a+2] == 0 & dprobatt[k,b+2] == 1) {
dprobatt[k,8] <- 3
}
else if (dprobatt[k,a+2] == 1 & dprobatt[k,b+2] == 1) {
dprobatt[k,8] <- 4
}
}
c1 <- sum(dprobatt$prob[which(dprobatt$ind == 1)])
c2 <- sum(dprobatt$prob[which(dprobatt$ind == 2)])
c3 <- sum(dprobatt$prob[which(dprobatt$ind == 3)])
c4 <- sum(dprobatt$prob[which(dprobatt$ind == 4)])
lgprob2[,7,i-5] <- c(c1,c2,c3,c4)
}
else if (i >= 11) {
a <- which(lgarray3[2,,i-10] == 1)
b <- which(lgarray3[3,,i-10] == 1)
c <- which(lgarray3[4,,i-10] == 1)
for (k in 1:length(dprobatt$prob)) {
if (dprobatt[k,a+2] == 0 & dprobatt[k,b+2] == 0 & dprobatt[k,c+2] == 0) {
dprobatt[k,8] <- 1
}
else if (dprobatt[k,a+2] == 1 & dprobatt[k,b+2] == 0 & dprobatt[k,c+2] == 0) {
dprobatt[k,8] <- 2
}
else if (dprobatt[k,a+2] == 0 & dprobatt[k,b+2] == 1 & dprobatt[k,c+2] == 0) {
dprobatt[k,8] <- 3
}
else if (dprobatt[k,a+2] == 0 & dprobatt[k,b+2] == 0 & dprobatt[k,c+2] == 1) {
dprobatt[k,8] <- 4
}
else if (dprobatt[k,a+2] == 1 & dprobatt[k,b+2] == 1 & dprobatt[k,c+2] == 0) {
dprobatt[k,8] <- 5
}
else if (dprobatt[k,a+2] == 1 & dprobatt[k,b+2] == 0 & dprobatt[k,c+2] == 1) {
dprobatt[k,8] <- 6
}
else if (dprobatt[k,a+2] == 0 & dprobatt[k,b+2] == 1 & dprobatt[k,c+2] == 1) {
dprobatt[k,8] <- 7
}
else if (dprobatt[k,a+2] == 1 & dprobatt[k,b+2] == 1 & dprobatt[k,c+2] == 1) {
dprobatt[k,8] <- 8}
c1 <- sum(dprobatt$prob[which(dprobatt$ind == 1)])
c2 <- sum(dprobatt$prob[which(dprobatt$ind == 2)])
c3 <- sum(dprobatt$prob[which(dprobatt$ind == 3)])
c4 <- sum(dprobatt$prob[which(dprobatt$ind == 4)])
c5 <- sum(dprobatt$prob[which(dprobatt$ind == 5)])
c6 <- sum(dprobatt$prob[which(dprobatt$ind == 6)])
c7 <- sum(dprobatt$prob[which(dprobatt$ind == 7)])
c8 <- sum(dprobatt$prob[which(dprobatt$ind == 8)])
lgprob3[,7,i-10] <- c(c1,c2,c3,c4,c5,c6,c7,c8)
}
}
}
condprobs <- rep(0, times = nrow(Q1))
condprobs
condprobs <- rep(0, times = nrow(Q1))
for (i in 1:nrow(Q1)) {
if (i < 6) {
condprobs[i] <- sum((modelfit$catprob.parm[i])*(lgprob1[,7,i]))
}
else if (i < 11) {
condprobs[i] <- sum((modelfit$catprob.parm[i])*(lgprob2[,7,i]))
}
else {
condprobs[i] <- sum((modelfit$catprob.parm[i])*(lgprob3[,7,i]))
}
}
condprobs <- rep(0, times = nrow(Q1))
for (i in 1:nrow(Q1)) {
if (i < 6) {
condprobs[i] <- sum((modelfit$catprob.parm[i])*t(lgprob1[,7,i]))
}
else if (i < 11) {
condprobs[i] <- sum((modelfit$catprob.parm[i])*t(lgprob2[,7,i]))
}
else {
condprobs[i] <- sum((modelfit$catprob.parm[i])*t(lgprob3[,7,i]))
}
}
a <- 1:2
b <- 3:4
sum(a*b)
modelfit$catprob.parm[i]
t(lgprob1[,7,i])
lgprob1[,7,i]
lgprob1[,7,i]
dim(lgprob1[,7,i])
(modelfit$catprob.parm[i])*(lgprob1[,7,i])
modelfit$catprob.parm[i]
(modelfit$catprob.parm$`Item 1`)*(lgprob1[,7,i])
sum((modelfit$catprob.parm$`Item 1`)*(lgprob1[,7,i]))
modelfit$catprob.parm$`Item 1`
sum(as.vector((modelfit$catprob.parm[i]))*(lgprob1[,7,i]))
as.vector(modelfit$catprob.parm[i])
#compute now the probability of item success using law of total prob
#P(U = 1) = summation of P(U = 1|latent grp)*P(latent grp)
a <- modelfit$catprob.parm
attributes(a)
attributes(a[i])
i <- 1
sum(unlist(modelfit$catprob.parm[i])*(lgprob1[,7,i]))
condprobs <- rep(0, times = nrow(Q1))
for (i in 1:nrow(Q1)) {
if (i < 6) {
i <- 1
condprobs[i] <- sum(unlist(modelfit$catprob.parm[i])*(lgprob1[,7,i]))
}
else if (i < 11) {
condprobs[i] <- sum(unlist(modelfit$catprob.parm[i])*(lgprob2[,7,i]))
}
else {
condprobs[i] <- sum(unlist(modelfit$catprob.parm[i])*(lgprob3[,7,i]))
}
}
condprobs <- rep(0, times = nrow(Q1))
for (i in 1:nrow(Q1)) {
if (i < 6) {
i <- 1
condprobs[i] <- sum(unlist(modelfit$catprob.parm[i])*(lgprob1[,7,i]))
}
else if (i < 11) {
condprobs[i] <- sum(unlist(modelfit$catprob.parm[i])*(lgprob2[,7,i-5]))
}
else {
condprobs[i] <- sum(unlist(modelfit$catprob.parm[i])*(lgprob3[,7,i-10]))
}
}
condprobs
condprobs <- rep(0, times = nrow(Q1))
for (i in 1:nrow(Q1)) {
if (i < 6) {
condprobs[i] <- sum(unlist(modelfit$catprob.parm[i])*(lgprob1[,7,i]))
}
else if (i < 11) {
condprobs[i] <- sum(unlist(modelfit$catprob.parm[i])*(lgprob2[,7,i-5]))
}
else {
condprobs[i] <- sum(unlist(modelfit$catprob.parm[i])*(lgprob3[,7,i-10]))
}
}
condprobs
modelfit$catprob.parm
#compute now the probability of item success using law of total prob
#P(U = 1) = summation of P(U = 1|latent grp)*P(latent grp)
lgprob1
install.packages("rmarkdown")
install.packages("Rtools")
install.packages("knitr")
install.packages("tinytex")
library(tinytex)
tinytex::install_tinytex()
library(tinytex)
library(fontspec)
install.packages("fontspec")
library(fontspec)
install.packages("unicode-math")
install.packages("Unicode")
library(Unicode)
library(knitr)
install.packages(kableExtra)
install.packages("kableExtra")
pnorm(-0.25*sqrt(40),0,1)
1-2*pnorm(-0.25*sqrt(40),0,1)
1-2*pnorm(-0.25*sqrt(80),0,1)
1-2*pnorm(-0.25*sqrt(27),0,1)
install.packages("coga")
library(coga)
library(GDINA)
frac20$Q
Q6 <- matrix(nrow = 30, byrow = TRUE,
data = c(1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,
1,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,
1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,
1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,
1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,
1,0,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,0,1,1))
gs <- matrix(rep(0.1,2*nrow(Q6)),ncol=2)
sampsize <- 1000
set.seed(1)
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "ACDM")
sim$delta.parm
sim$catprob.parm
gs <- matrix(rep(0.1,2*nrow(Q6)),ncol=2)
sampsize <- 1000
set.seed(1)
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "DINA")
sim$catprob.parm
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "DINO")
sampsize <- 1000
set.seed(1)
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "DINO")
sim$catprob.parm
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "LLM")
sim$catprob.parm
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "RRUM")
sim$catprob.parm
gs <- matrix(rep(0.2,2*nrow(Q6)),ncol=2)
sampsize <- 1000
set.seed(1)
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "DINA")
sim$catprob.parm
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "DINO")
sim$catprob.parm
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "ACDM")
sim$catprob.parm
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "LLM")
sim$catprob.parm
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "RRUM")
sim$catprob.parm
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "LLM")
sim$catprob.parm
gs <- matrix(rep(0.3,2*nrow(Q6)),ncol=2)
sampsize <- 1000
set.seed(1)
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "DINA")
sim$catprob.parm
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "ACDM")
sim$catprob.parm
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "LLM")
sim$catprob.parm
sim <- simGDINA(N = sampsize, Q = Q6, gs.parm = gs,
gs.args = list(type = "equal"), model = "RRUM")
sim$catprob.parm
library(GDINA)
?install.packagee
?install.packages
library(GDINA)
library(GDINA)
gsnum <- 0.1
sampsize <- 1000
Q6 <- matrix(nrow = 30, byrow = TRUE,
data = c(1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,
1,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,
1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,
1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,
1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,
1,0,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,0,1,1))
Q1 <- Q6[1:15,]
correctQ <- Q1
mod <- "GDINA"
gs <- matrix(rep(gsnum,2*nrow(correctQ)),ncol=2)
#generate a dataset from mod
sim <- simGDINA(N = sampsize, Q = correctQ, gs.parm = gs,
gs.args = list(type = "equal"), model = mod)
simdata <- extract(sim, what = "dat")
simdata
extract(simdata, what = "catprob.parm")
extract(simdata, what = "catprob.parm")
extract(sim, what = "catprob.parm")
extract(sim, what = "delta.parm")
extract(sim, what = "catprob.parm")
library(GDINA)
gsnum <- 0.0.05
sampsize <- 1000
Q6 <- matrix(nrow = 30, byrow = TRUE,
data = c(1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,
1,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,
1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,
1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,
1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,
1,0,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,0,1,1))
Q1 <- Q6[1:15,]
correctQ <- Q1
mod <- "GDINA"
gs <- matrix(rep(gsnum,2*nrow(correctQ)),ncol=2)
#generate a dataset from mod
sim <- simGDINA(N = sampsize, Q = correctQ, gs.parm = gs,
gs.args = list(type = "equal"), model = mod)
simdata <- extract(sim, what = "dat")
extract(sim, what = "catprob.parm")
#extract(sim, what = "delta.parm")
library(GDINA)
gsnum <- 0.05
sampsize <- 1000
Q6 <- matrix(nrow = 30, byrow = TRUE,
data = c(1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,
1,1,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,
1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,
1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,
1,0,1,0,0,1,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,0,1,
1,0,1,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,1,0,1,0,1,1))
Q1 <- Q6[1:15,]
correctQ <- Q1
mod <- "GDINA"
gs <- matrix(rep(gsnum,2*nrow(correctQ)),ncol=2)
#generate a dataset from mod
sim <- simGDINA(N = sampsize, Q = correctQ, gs.parm = gs,
gs.args = list(type = "equal"), model = mod)
simdata <- extract(sim, what = "dat")
extract(sim, what = "catprob.parm")
#extract(sim, what = "delta.parm")
library(GDINA)
frac20
modfit <- GDINA(dat = frac20$dat,Q = frac20$Q,model = "DINA")
modfit$catprob.parm
modfit$catprob.parm$`Item 1`
typeof(modfit$catprob.parm$`Item 1`)
is.vector(modfit$catprob.parm$`Item 1`)
modfit$pf
modfit$catprob.parm
a <- rep(0, times = 20)
for (i in 1:20) {
a[i] <- modfit$catprob.parm[[i]][length(modfit$catprob.parm[[i]])] - modfit$catprob.parm[[i]][1]
2412
wqada
for (i in 1:20) {
a[i] <- modfit$catprob.parm[[i]][length(modfit$catprob.parm[[i]])] - modfit$catprob.parm[[i]][1]
}
for (i in 1:20) {
a[i] <- modfit$catprob.parm[[i]][length(modfit$catprob.parm[[i]])] - modfit$catprob.parm[[i]][1]
}
for (i in 1:20) {
a[i] <- modfit$catprob.parm[[i]][length(modfit$catprob.parm[[i]])] - modfit$catprob.parm[[i]][1]
}
dwadwa
qwrqwr2
4214
241
41
63643
1+1
library(GDINA)
modfit <- GDINA(dat = frac20$dat,Q = frac20$Q,model = "DINA")
modfit$catprob.parm
a <- rep(0, times = 20)
for (i in 1:20) {
a[i] <- modfit$catprob.parm[[i]][length(modfit$catprob.parm[[i]])] - modfit$catprob.parm[[i]][1]
}
a
modfit$catprob.parm[[9]]
a <- round(a, digits = 2)
a
?itemfit
load("C:/Users/Janeth/Documents/Sam/MS Stat/Thesis/simulation/FINAL NA TO PLS/SS1 - ACDM rerun/ACDM-ACDM-30-GIQ-2OOO-RS.rda")
results
load("C:/Users/Janeth/Documents/Sam/MS Stat/Thesis/simulation/FINAL NA TO PLS/SS1 - ACDM rerun/ACDM-ACDM-30-GIQ-2OOO-MT.rda")
results
results$SampleSize
results$fitmodel
library(GDINA)
?GDINA()
R.version()
R.Version()
load("C:/Users/Janeth/Documents/Sam/MS Stat/Thesis/simulation/FINAL NA TO PLS/SS1 - ACDM rerun/ACDM-ACDM-30-GIQ-2OOO-MT.rda")
results$genmodel
library(GDINA)
?simGDINA()
?R.Version()
R.Version()
?RNGversion
#asdfghgasdfghs
library(grid)
library(xlsx)
library(ggplot2)
library(ggtext)
library(directlabels)
library(cowplot)
library(gridExtra)
library(rstudioapi)
library(dplyr)
library(ggrepel)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))git
getwd()
library(extrafont)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
